#!/usr/bin/env luajit

-- Do a 3-way compare between the pure-lua, bpf-lua and pure-libpcap pipelines,
-- given pflang, indicating whether or not all three match.

package.path = package.path .. ";../src/?.lua"

local pf = require("pf")
local savefile = require("pf.savefile")

local function usage()
   print([[
Usage: pipe-lua-libpcap-match IN.PCAP FILTER PKT_NUMBER
   IN.PCAP     Input file in .pcap format.
   FILTER      Filter to apply, as a string or file.
   PKT_NUMBER  Check if the pipelines match on the specified packet
   ]])
   os.exit(false)
end

local function filter(packets, lua_pred, bpf_pred, libpcap_pred, pkt_number)
   local pkt = packets[pkt_number]
   local r1 = lua_pred(pkt.packet, pkt.len)
   local r2 = bpf_pred(pkt.packet, pkt.len)
   local r3 = libpcap_pred(pkt.packet, pkt.len)
   local res = r1 == r2 and r1 == r3 and r2 == r3
   if res then
      local msg = "OK: pure-lua, bfp-lua, and libpcap pipelines matched: all %s"
      print(msg:format(r1))
   else
      print(("BUG: pure-lua %s, bpf-lua %s, libpcap %s."):format(r1, r2, r3))
   end
   return res
end

local function main_filter(pcap_file, filter_input, pkt_number, opt)
   local packets = savefile.load_packets(pcap_file)
   local pflua_pred = pf.compile_filter(filter_input, {optimize=opt})
   local bpf_pred = pf.compile_filter(filter_input, {bpf=true, optimize=opt})
   local lpcap = pf.compile_filter(filter_input, {libpcap=true, optimize=opt})
   os.exit(filter(packets, pflua_pred, bpf_pred, lpcap, pkt_number))
end

local optimize = true
if arg[1] == '-O0' then
   optimize=false
   table.remove(arg, 1)
end

local pcap_file, filter_str, pkt_number = arg[1], arg[2], arg[3]
if not pkt_number then usage() end
main_filter(pcap_file, filter_str, tonumber(pkt_number), optimize)
