#!/usr/bin/env luajit

package.path = package.path .. ";../src/?.lua"

local pf = require("pf")
local bpf = require("pf.bpf")
local utils = require("pf.utils")

function usage()
   local content = [=[
Usage: pflang-compile [--bpf] [--lua] [--pflua] <pflang-expression>

Options:

   --bpf-asm\tPrint libpcap-generated BPF asm code for <pflang-expression>
   --bpf-lua\tPrint Lua code compiled from BPF for <pflang--expression>
   --lua\tPrint Lua code compiled directly for <pflang--expression>\t(DEFAULT)

   ]=]
   print(content);
   os.exit()
end

-- Print help
if (#arg == 0) then
   usage()
end

local flags = utils.set(...)

-- Print help
if flags["--help"] or flags["-h"] then
   usage()
end

-- No code-generation flag defined
if (not(flags["--bpf-asm"] or flags["--bpf-lua"] or flags["--lua"])) then
   -- Default action
   flags["--lua"] = true
end

local filter = arg[#arg]
if flags["--bpf-asm"] then
   print(pf.compile_filter(filter, {pcap_offline_filter=true, source=true}))
end
if flags["--bpf-lua"] then
   print(pf.compile_filter(filter, {bpf=true, source=true}))
end
if flags["--lua"] then
   print(pf.compile_filter(filter, {source=true}))
end
