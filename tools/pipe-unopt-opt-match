#!/usr/bin/env luajit

-- Given pflang, or pflua IR, make sure that the pure-lua pipeline
-- gives the same result with and without optimizations applied.

package.path = package.path .. ";../src/?.lua;../tests/?.lua"

local pf = require("pf")
local savefile = require("pf.savefile")
local optimize = require('pf.optimize')
local pfcompile = require('pfquickcheck.pfcompile')


local function usage()
   print([[
Usage: pipe-unopt-opt-match IN.PCAP FILTER PKT_NUMBER
       pipe-unopt-opt-match --ir IN.PCAP IR_FILE IR_FILE PKT_NUMBER
   IN.PCAP     Input file in .pcap format.
   FILTER      Filter to apply, as a string or file.
   PKT_NUMBER  Check if the pipelines match on the specified packet
   IR_FILE     filename containing IR; 2nd may be 'HEAD' (=> optimize ir1)
   ]])
   os.exit(false)
end

local function filter(packets, pred1, pred2, pkt_number)
   local pkt = packets[pkt_number]
   local r1 = pred1(pkt.packet, pkt.len)
   local r2 = pred2(pkt.packet, pkt.len)
   if r1 == r2 then
      print(("OK: %s with and without optimization"):format(r1))
   else
      print(("BUG: unoptimized %s, optimized %s."):format(r1, r2))
   end
   return r1 == r2
end

local function main_pflang(pcap_file, filter_input, pkt_number)
   local packets = savefile.load_packets(pcap_file)
   local pflua_unopt = pf.compile_filter(filter_input, {optimize=false})
   local pflua_opt = pf.compile_filter(filter_input, {optimize=true})
   os.exit(filter(packets, pflua_unopt, pflua_opt, pkt_number))
end

local function read_and_compile_ast(ir_file, optimize_ast)
   local ir_in = assert(io.open(ir_file))
   local ir_str = ir_in:read('*a')
   local ast = assert(loadstring('return ' .. ir_str))()
   ir_in:close()
   if optimize_ast then ast = optimize.optimize(ast) end
   return pfcompile.compile_ast(ast, ir_file)
end

local function main_ir(pcap_file, ir1, ir2, pkt_number)
   local packets = savefile.load_packets(pcap_file)
   local ir1_pred = read_and_compile_ast(ir1, false)
   local ir2_pred
   -- It's more useful to check the *current* optimization rather than some
   -- known good past one, for the sake of regression testing.
   -- The special value "HEAD" for an ir file indicates that the first IR
   -- should be optimized, instead of compared against a different literal one.
   if ir2 == "HEAD" then
      ir2_pred = read_and_compile_ast(ir1, true)
   else
      ir2_pred = read_and_compile_ast(ir2, false)
   end
   os.exit(filter(packets, ir1_pred, ir2_pred, pkt_number))
end

-- Parse args
local is_ir = false
if arg[1] == '--ir' then
   is_ir = true
   table.remove(arg, 1)
end

if is_ir then
   local pcap_file, ir1, ir2, pkt_number = arg[1], arg[2], arg[3], arg[4]
   if not pkt_number then usage() end
   main_ir(pcap_file, ir1, ir2, tonumber(pkt_number))
else
   local pcap_file, filter_str, pkt_number = arg[1], arg[2], arg[3]
   if not pkt_number then usage() end
   main_pflang(pcap_file, filter_str, tonumber(pkt_number), is_ir)
end
